html
	head
		meta(sharset = 'utf-8')
		style.
			* {
				padding: 0 0;
				margin: 0 0;
			}

			.menu {
				position: fixed;
				left: 0px;
				bottom: 0px;
				padding: 10px 10px;
				color: black;
			}

	body
		canvas#frame
		div.menu

		script(src = "https://code.jquery.com/jquery-3.3.1.min.js")
		script(src = '/gl-matrix.js')
		script(src = '/scripts.js')

		script.
			var frame, gl, shaderProgram, postProcessingShaderProgram, gridShader, quadVBO
			var frameBuffer1, bufferTexture1, 
				frameBuffer2, bufferTexture2
			var depthBuffer
			var model
			var startTimePoint = Date.now()
			var eyeMatrix = new Float32Array(16), 
				worldMatrix = new Float32Array(16), 
				projectionMatrix = new Float32Array(16)
			var camera
			var hexagon, bridge, grid

			var level = undefined

			var pos = 1, bridgeDir = 2

			function renderGrid(){
				gridShader.start()

				gridShader.setUniform('eyeMatrix', camera.getEyeMatrix(), 'mat4')
				gridShader.setUniform('worldMatrix', worldMatrix, 'mat4')
				gridShader.setUniform('projectionMatrix', projectionMatrix, 'mat4')

				gridShader.setUniform('paintColor', [ .2, .2, .2 ], 'v3')

				grid.render(gl.LINES)

				gridShader.stop()
			}

			function renderWorld(){
				gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1)
				
				gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
				gl.enable(gl.DEPTH_TEST)
				gl.depthFunc(gl.LESS)

				renderGrid()

				shaderProgram.start()

				mat4.identity(worldMatrix)
				shaderProgram.setUniform('eyeMatrix', camera.getEyeMatrix(), 'mat4')
				shaderProgram.setUniform('worldMatrix', worldMatrix, 'mat4')
				shaderProgram.setUniform('projectionMatrix', projectionMatrix, 'mat4')

				shaderProgram.setUniform('paintColor', [ .5, .9, .5 ], 'v3')
				shaderProgram.setUniform('size', 1., 'f')
				shaderProgram.setUniform('lightPosition', camera.getPosition(), 'v3')

				if(level){
					for(var i = 0;i < level.data.length;i++){
						if(level.data[i].type == 'cell'){
							var oX = level.data[i].x, 
								oY = level.data[i].y, 
								red = level.data[i].color[0] / 255., 
								green = level.data[i].color[1] / 255., 
								blue = level.data[i].color[2] / 255.

							mat4.translate(worldMatrix, worldMatrix, [ -oX, 0, -oY ])
							mat4.scale(worldMatrix, worldMatrix, [ 1. * level.sideLength, (i + 1) / 10. * level.sideLength, 1. * level.sideLength ])
							shaderProgram.setUniform('worldMatrix', worldMatrix, 'mat4')
							shaderProgram.setUniform('paintColor', [ red, green, blue ], 'v3')

							hexagon.render()

							mat4.scale(worldMatrix, worldMatrix, [ 1. / level.sideLength, 10. / (i + 1) / level.sideLength, 1. / level.sideLength ])

							if(pos == i) { 
								var scaller = [ .1, .1, .1 ], shift = vecByDir(1., bridgeDir)

								shift = [ shift[0] / 2., 1., shift[1] / 2. ]							

								mat4.translate(worldMatrix, worldMatrix, shift)
								mat4.scale(worldMatrix, worldMatrix, scaller)
								shaderProgram.setUniform('worldMatrix', worldMatrix, 'mat4')
								
								bridge.render()

								mat4.scale(worldMatrix, worldMatrix, [ 1. / scaller[0], 1. / scaller[1], 1. / scaller[2] ])
								vec3.negate(shift, shift)
								mat4.translate(worldMatrix, worldMatrix, shift)
							}

							mat4.translate(worldMatrix, worldMatrix, [ oX, 0, oY ])
						}
					}
				}

				shaderProgram.stop()
			}

			function postProcessing(){
				/* POST PROCESSING FIRST STAGE */
				gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2)
				gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
				gl.activeTexture(gl.TEXTURE0)
				gl.bindTexture(gl.TEXTURE_2D, bufferTexture1)
				postProcessingShaderProgram.start()
				postProcessingShaderProgram.setUniform('uResolution', [ frame.width, frame.height ], 'v2')
				postProcessingShaderProgram.setUniform('tx1', 0, 'i')
				postProcessingShaderProgram.setUniform('dir', [ 0, 0 ], 'v2')
				quadVBO.bind()
				loc = postProcessingShaderProgram.getAttributeLocation('position')
				gl.enableVertexAttribArray(loc)
				gl.vertexAttribPointer(loc, 2, gl.FLOAT, gl.FALSE, 2 * Float32Array.BYTES_PER_ELEMENT, 0)
				gl.drawArrays(gl.TRIANGLES, 0, 6)
				quadVBO.unbind()
				postProcessingShaderProgram.stop()


				/* POST PROCESSING SECOND STAGE */
				gl.bindFramebuffer(gl.FRAMEBUFFER, null)
				gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
				gl.activeTexture(gl.TEXTURE0)
				gl.bindTexture(gl.TEXTURE_2D, bufferTexture2)
				postProcessingShaderProgram.start()
				postProcessingShaderProgram.setUniform('uResolution', [ frame.width, frame.height ], 'v2')
				postProcessingShaderProgram.setUniform('tx1', 0, 'i')
				postProcessingShaderProgram.setUniform('dir', [ 0, 0 ], 'v2')
				quadVBO.bind()
				gl.drawArrays(gl.TRIANGLES, 0, 6)
				quadVBO.unbind()
				postProcessingShaderProgram.stop()
			}

			var tick = 0
			function loop(){
				++tick

				renderWorld()				

				postProcessing()				

				/* NEXT FRAME REQUEST */
				requestAnimationFrame(loop)
			}

			async function initGL(){
				gl = frame.getContext('webgl2')	
					
				var vShaderText, fShaderText, ftShaderText, vtShaderText, gridVertexShaderText, gridFragmentShaderText

				await loadResource('vertexBasic.glsl').then(function(data){
					vShaderText = data
					return loadResource('fragmentBasic.glsl')
				}).then(function(data){
					fShaderText = data
					return loadResource('fragmentTexture.glsl')
				}).then(function(data){
					ftShaderText = data
					return loadResource('vertexTexture.glsl')
				}).then(function(data){
					vtShaderText = data
					return loadResource('gridVertexShader.glsl')
				}).then(function(data){
					gridVertexShaderText = data
					return loadResource('gridFragmentShader.glsl')
				}).then(function(data){
					gridFragmentShaderText = data
				})

				shaderProgram = createShaderProgram(vShaderText, fShaderText)
				shaderProgram.initUniforms([ 'uResolution', 'uTime', 'projectionMatrix', 'eyeMatrix', 'worldMatrix', 'lightPosition', 'paintColor', 'size' ])

				postProcessingShaderProgram = createShaderProgram(vtShaderText, ftShaderText)
				postProcessingShaderProgram.initUniforms([ 'uResolution', 'tx1', 'dir' ])

				gridShader = createShaderProgram(gridVertexShaderText, gridFragmentShaderText)
				gridShader.initUniforms([ 'paintColor', 'projectionMatrix', 'eyeMatrix', 'worldMatrix' ])

				gl.clearColor(.9, .9, .9, 1.0)

				quadVBO = createVBO()
				quadVBO.setData([ -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1 ])
			
				//model = await loadModel('hexPlate.ply')
				//var DATA = createDataWithNormals(model.vertices, model.indecies)
				//var DATA = createHexPlate()
				var DATA = await loadModel('hex.obj')
	
				hexagon = createModel(DATA, 
					[
						{ layoutPosition: 0, componentLength: 3, stride: 6, offset: 0 }, 
						{ layoutPosition: 1, componentLength: 3, stride: 6, offset: 3 }
					])

				bridge = createModel(await loadModel('bridge.obj'), 
					[
						{ layoutPosition: 0, componentLength: 3, stride: 6, offset: 0 }, 
						{ layoutPosition: 1, componentLength: 3, stride: 6, offset: 3 }
					])

				grid = createModel(createGrid(10), [{ layoutPosition: 0, componentLength: 3, stride: 3, offset: 0 }])

				bufferTexture1 = createTexture(frame.width, frame.height)
				frameBuffer1 = createFramebuffer(bufferTexture1)

				bufferTexture2 = createTexture(frame.width, frame.height)
				frameBuffer2 = createFramebuffer(bufferTexture2)
				
				depthBuffer = createRenderBuffer(frame.width, frame.height, frameBuffer1)
				mat4.perspective(projectionMatrix, 45 * Math.PI / 180.0, frame.width / frame.height, 0.1, 1000.0)
				
				gl.lineWidth(1)

				level = await loadSavedLevel()
				let scaller = level.sideLength
				level.sideLength /= scaller
				for(var i = 0;i < level.data.length;i++)
					if(level.data[i].type == 'cell')
						level.data[i].x /= scaller, 
						level.data[i].y /= scaller
				loop()
			}

			$(document).ready(function(){
				frame = $('#frame')[0]

				frame.width = window.innerWidth
				frame.height = window.innerHeight

				camera = createCamera([ 0, 2, -14 ])

				$(window).on('keydown', function(ev){
					if(ev.keyCode == 87){
						camera.moveForward(1)
					} else if(ev.keyCode == 83){
						camera.moveForward(-1)
					} else if(ev.keyCode == 68) {
						camera.rotateHorizontal(-Math.PI / 24.0)
					} else if(ev.keyCode == 65){
						camera.rotateHorizontal(Math.PI / 24.0)
					} else if(ev.keyCode == 38) {
						camera.rotateVertical(Math.PI / 24.0)
					} else if(ev.keyCode == 40) {
						camera.rotateVertical(-Math.PI / 24.0)
					} else if(ev.keyCode == 82) {
						camera.reset()
					}	
				})

				$(window).on('mousewheel', function(e){
					var ev = e.originalEvent
					if(ev.deltaY > 0){
						bridgeDir++
					} else {	
						bridgeDir--
					}

					bridgeDir = (bridgeDir + 6) % 6
				})

				var mouseX = undefined, mouseY = undefined, dragging = false
				$('#frame').on('mousedown', function(ev){
					mouseX = ev.offsetX
					mouseY = ev.offsetY
					dragging = false
				})

				$('#frame').on('mousemove', function(ev){
					if(mouseX && mouseY) {
						dragging = true

						var deltaX = ev.offsetX - mouseX, 
							deltaY = ev.offsetY - mouseY

						camera.rotateVertical(toRadians(45.0 * deltaY / frame.height))
						camera.rotateHorizontal(toRadians(45.0 / frame.height * frame.width * deltaX / frame.width))

						mouseX = ev.offsetX
						mouseY = ev.offsetY
					}
				})

				$('#frame').on('mouseup', function(ev){
					mouseX = ev.offsetX
					mouseY = ev.offsetY
					if(dragging){
						mouseX = undefined
						mouseY = undefined
					} else {

						// Process click
						// TODO

					}
				})

				setInterval(function(){
					var text = 'Debug Menu<br>'

					var x = camera.position[0], y = camera.position[1], z = camera.position[2]
					text += 'Position: [ ' + formatFloat(x) + ' ' + formatFloat(y) + ' ' + formatFloat(z) + ' ]<br>'

					x = camera.direction[0], y = camera.direction[1], z = camera.direction[2]
					text += 'Direction: [' + formatFloat(x) + ' ' + formatFloat(y) + ' ' + formatFloat(z) + ' ]<br>'

					x = camera.up[0], y = camera.up[1], z = camera.up[2]
					text += 'Up: [' + formatFloat(x) + ' ' + formatFloat(y) + ' ' + formatFloat(z) + ' ]<br>'

					$('.menu').html(text)
				}, 200)

				initGL()
			})