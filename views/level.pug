head
	<link href="https://fonts.googleapis.com/css?family=Roboto:300" rel="stylesheet">
	title Level creator
	style.
		*{
			margin: 0 0;
			padding: 0 0;
			font-family: 'Roboto';
		}

		#color-picker{
			position: fixed;
			top: 10px;
			right: 10px;
		}

		#color-icon {
			position: fixed;
		}

		#frame {
			position: fixed;
		}

		#bottomMenu {
			display: flex;
			position: fixed;
			bottom: 10px;
			right: 10px;
			flex-direction: row;
			min-width: 100vw;
			justify-content: space-around;
		}

		#bottomMenu label {
			line-height: 67px;
		}

		#bottomMenu input[type = 'radio'] {
			display: none;
		}

		#bottomMenu input[type = 'radio']:checked + label {
			color: red;
		}

		#saveButton {
			padding: 15 50;
			font-size: 30px;
			background-color: red;
			color: white;
			cursor: pointer;
		}

		#linker {
			background-color: #8BC34A;
			padding: 15 50;
			font-size: 30px;
			color: white;
			cursor: pointer;
		}

		#sliders {
			display: flex;
			flex-direction: column;
			width: 400px;
			position: fixed;
			right: 10px;
		}

		.row {
			width: 100%;
			display: flex;
			flex-direction: row;
			justify-content: space-between;
		}

		.bridgeId {
			color: #26C6DA;
		}

		input[type = 'range'] {
			width: 250px;
		}

	body 
		div#sliders
			.row 
				p Red
				input#red(type = 'range' min = '0' max = '255')
			.row
				p Green
				input#green(type = 'range' min = '0' max = '255')
			.row
				p Blue
				input#blue(type = 'range' min = '0' max = '255')
			.row
				p Alpha
				input#alpha(type = 'range' min = '0' max = '255')

		canvas#color-picker
		canvas#color-icon
		canvas#frame

		div#bottomMenu
			label.bridgeId#bridgeFirstText undefined
			label.bridgeId#bridgeSecondText undefined
			input.myRadio(name = 'group' type = 'radio' id = 'coloring' checked)
			label(for = 'coloring') COLOR
			input.myRadio(name = 'group' type = 'radio' id = 'deleting')
			label(for = 'deleting') DELETE
			input.myRadio(name = 'group' type = 'radio' id = 'creating')
			label(for = 'creating') CREATE
			input.myRadio(name = 'group' type = 'radio' id = 'bridgeFirst')
			label(for = 'bridgeFirst') BRIDGE FIRST
			input.myRadio(name = 'group' type = 'radio' id = 'bridgeSecond')
			label(for = 'bridgeSecond') BRIDGE SECOND
			div#linker BRIDGE
			div#saveButton SAVE

		script(src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous")
		script(src = '/gl-matrix.js')
		script(src = '/scripts.js')

		script.
			var colorPickerSize = { width: 300, height: 300 }, 
				colorIconSize = { width: 100, height: 100 }, 
				frameSize = { width: 1000, height: 800 }, 
				frameTranslate = { x: 500, y: 400 }, 
				redChannel = 100, 
				blueChannel = 20, 
				greenChannel = 220, 
				alphaChannel = 255, 
				scale = 2.

			function revalidateSliders(){
				$('#red')[0].value = redChannel
				$('#green')[0].value = greenChannel
				$('#blue')[0].value = blueChannel
				$('#alpha')[0].value = alphaChannel

				data.paintColor = [ redChannel, greenChannel, blueChannel, alphaChannel ]
			}

			$('input[type = "radio"]').on('input', function(){
				operation = this.id
			})

			$('#red').on('input', function(){
				redChannel = this.value
				updateColorIcon()
				revalidateSliders()
			})

			$('#green').on('input', function(){
				greenChannel = this.value
				updateColorIcon()
				revalidateSliders()
			})

			$('#blue').on('input', function(){
				blueChannel = this.value
				updateColorIcon()
				revalidateSliders()
			})

			$('#alpha').on('input', function(){
				alphaChannel = this.value
				updateColorIcon()
				revalidateSliders()
			})

			function createHexagon(x, y){
				return { originX: x, originY: y, color: [ redChannel, greenChannel, blueChannel, alphaChannel ], dirs: [ -1, -1, -1, -1, -1, -1 ] }
			}

			var data = []

			function drawColorPicker(){
				$('#color-picker').css('width', colorPickerSize.width)
				$('#color-picker').css('height', colorPickerSize.height)

				$('#sliders').css('width', colorPickerSize.width)
				$('#sliders').css('top', colorPickerSize.height + colorIconSize.height + 40)

				$('#color-picker')[0].width = colorPickerSize.width
				$('#color-picker')[0].height = colorPickerSize.height

				var g = $('#color-picker')[0].getContext('2d')
	
				var posRed = [ 30, 270 ]
				var posBlue = [ 270, 270 ]
				var posGreen = [ 150, 30 ] 

				var f = colorPickerSize.width
				for(var i = 0;i < colorPickerSize.width;i++){
					for(var j = 0;j < colorPickerSize.height;j++){
						var red, green, blue, alpha

						red = green = blue = alpha = 0

						var dred = Math.max(0, -vec2.distance([ i, j ], posRed) + 230), 
							dblue = Math.max(0, -vec2.distance([ i, j ], posBlue) + 230), 
							dgreen = Math.max(0, -vec2.distance([ i, j ], posGreen) + 230)
						var dsum = dred + dgreen + dblue

						red = (dsum - dred) / dsum
						green = (dsum - dgreen) / dsum
						blue = (dsum - dblue) / dsum

						red = red * 255 | 0
						green = green * 255 | 0
						blue = blue * 255 | 0
						alpha = 255

						g.fillStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + alpha + ')'
						g.fillRect(i, j, 1, 1)
					}
				}
			}

			function updateColorIcon(){
				$('#color-icon').css('width', colorIconSize.width)
				$('#color-icon').css('height', colorIconSize.height)

				$('#color-icon').css('top', colorPickerSize.height + 20)
				$('#color-icon').css('right', (colorPickerSize.width - colorIconSize.width) / 2 + 10)

				$('#color-icon')[0].width = colorIconSize.width
				$('#color-icon')[0].height = colorIconSize.height

				var g = $('#color-icon')[0].getContext('2d')
				g.fillStyle = 'rgba(' + redChannel + ',' + greenChannel + ',' + blueChannel + ',' + alphaChannel + ')'
				g.fillRect(0, 0, colorIconSize.width, colorIconSize.height)

				g.fillStyle = 'white'
				g.textBaseline = 'top'
				g.font = '15px Arial'
				g.fillText('red: ' + redChannel, 10, 10)
				g.fillText('green: ' + greenChannel, 10, 25)
				g.fillText('blue: ' + blueChannel, 10, 40)
				g.fillText('alpha: ' + alphaChannel, 10, 55)		
			}

			function drawHexagon(g, hexagon, sideLength){
				var x = hexagon.originX, y = hexagon.originY

				g.translate(x, y)

				var a = sideLength
				var b = a * Math.sqrt(3) / 2.0
				var c = a / 2

				g.strokeStyle = 'black'
				g.lineWidth = 3
				g.fillStyle = rgbaString(hexagon.color)

				g.beginPath()
				g.moveTo(a, 0)
				g.lineTo(c, b)
				g.lineTo(-c, b)
				g.lineTo(-a, 0)
				g.lineTo(-c, -b)
				g.lineTo(c, -b)
				g.closePath()

				g.fill()
				g.stroke()

				for(var i = 0;i < 6;i++){
					if(hexagon.dirs[i] == -1){
						var vec = vecByDir(sideLength, i)
						g.moveTo(vec[0] / 5 * 3, vec[1] / 5 * 3)
						g.lineTo(vec[0] / 7 * 6, vec[1] / 7 * 6)
						g.stroke()
					}
				}

				g.translate(-x, -y)
			}

			function updateMap(){
				$('#frame').css('width', frameSize.width)
				$('#frame').css('height', frameSize.height)

				$('#frame').css('top', 10)
				$('#frame').css('left', 10)

				$('#frame')[0].width = frameSize.width
				$('#frame')[0].height = frameSize.height

				var g = $('#frame')[0].getContext('2d')

				g.strokeStyle = 'black'
				g.strokeRect(0, 0, frameSize.width, frameSize.height)

				g.translate(frameTranslate.x, frameTranslate.y)
				g.scale(scale, scale)

				/*for(var i = 0;i < data.graph.length;i++){
					drawHexagon(g, data.graph[i], data.sideLength)
				}*/

				if(data.data)
					data.render(g)
			}

			function updateHexGraph(hexagon){
				for(var dir = 0;dir < 6;dir++){
					var vec = vecByDir(data.sideLength, dir)

					for(var j = 0;j < data.graph.length;j++){
						if(isInsideHexagon(data.graph[j], data.sideLength, [ hexagon.originX + vec[0], hexagon.originY + vec[1] ])){
							hexagon.dirs[dir] = dir
							data.graph[j].dirs[backDir(dir)] = data.graph.length
						}
					}
				}
			}

			/*
				operation:
					'coloring' is for changing cell/bridge color  <--- DEFAULT
					'creating' is for creating cell
					'deleting' is for deleting cell
					'bridgeFirst' is for setting first bridge cell
					'bridgeSecond' is for setting second bridge cell	
			*/
			var operation = 'coloring', 
				bridge = [ undefined, undefined ]

			function processClick(x, y){
				x /= scale
				y /= scale
				if(operation == 'coloring') {
					data.colorClick(x, y)
				} else if(operation == 'deleting') {
					data.deleteClick(x, y)
				} else if(operation == 'creating') {
					data.createClick(x, y)
				} else if(operation == 'bridgeFirst') {
					var id = data.getIdInPos(x, y)
					if(id) 
						bridge[0] = id, $('#bridgeFirstText').text(id)
					else 
						bridge[0] = undefined, $('#bridgeFirstText').text('undefined')
				} else if(operation == 'bridgeSecond') {
					var id = data.getIdInPos(x, y)
					if(id) 
						bridge[1] = id, $('#bridgeSecondText').text(id)
					else 
						bridge[1] = undefined, $('#bridgeSecondText').text('undefined')
				} else {
					console.log('not implemented command', operation)
				}
				//data.click(x, y)
			}

			async function initLevel(){
				var loadedData = await loadSavedLevel()
				data = new MapContainer()

				data.data = loadedData.data
				data.paintColor = loadedData.paintColor

				updateMap()
			}

			$(document).ready(function(){
				initLevel()
				
				drawColorPicker()
				updateColorIcon()
				
				updateMap()

				revalidateSliders()

				$('#frame').on('click', function(e){
					if(!dragging)
						processClick(e.offsetX - frameTranslate.x, e.offsetY - frameTranslate.y)

					updateMap()
				})

				$('#color-picker').on('click', function(e){
					var rgba = $('#color-picker')[0].getContext('2d').getImageData(e.offsetX, e.offsetY, 1, 1).data
					redChannel = rgba[0]
					greenChannel = rgba[1] 
					blueChannel = rgba[2] 
					alphaChannel = rgba[3]

					data.paintColor = [
						redChannel, 
						greenChannel, 
						blueChannel, 
						alphaChannel
					]
					revalidateSliders()
					updateColorIcon()
				})

				$('#frame').on('mousewheel', function(e){
					let ev = e.originalEvent
					const scaller = .8
					if(ev.wheelDelta < 0){
						scale *= scaller
					} else {
						scale /= scaller
					}	
					updateMap()
				})

				var down = false
				var mouseX = undefined, mouseY = undefined
				var dragging = false
				$('#frame').on('mousedown', function(ev){
					mouseX = ev.offsetX
					mouseY = ev.offsetY
					dragging = false
				})

				$('#frame').on('mouseup', function(ev){
					mouseX = undefined, mouseY = undefined
				})

				$('#frame').on('mousemove', function(ev){
					if(mouseX && mouseY){
						let deltaX = ev.offsetX - mouseX
						let deltaY = ev.offsetY - mouseY
						frameTranslate.x += deltaX
						frameTranslate.y += deltaY

						if(deltaX != 0 || deltaY != 0)
							dragging = true

						mouseX = ev.offsetX
						mouseY = ev.offsetY
						updateMap()
					}
				})

				$('#linker').on('click', function(){
					if(bridge[0] && bridge[1]) {
						data.bridge(bridge[0], bridge[1])
					}
					updateMap()
				})

				$('#saveButton').on('click', function(){
					var buffer = data
					$.ajax({
						url: '/saveData', 
						data: { level: JSON.stringify(buffer) }, 
						method: 'post', 
						success: function(){
							alert('Saved')
						}
					})
				})
			})